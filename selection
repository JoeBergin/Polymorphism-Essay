{
  "title": "Selection",
  "journal": [
    {
      "id": "0eb46e66515c157a",
      "type": "create",
      "item": {
        "title": "Selection"
      }
    }
  ],
  "story": [
    {
      "text": "A selection problem is the situation that arises in which two or more possible behaviors are possible and the program must choose between them based on some criteria. In C-like languages these are typically handled with \"if\" statements and \"switches\". ",
      "id": "57e3301a4964b9c7",
      "type": "paragraph"
    },
    {
      "text": "Handling selection in this traditional way will be called \"ad-hoc\" selection here. It has some issues. ",
      "id": "d747b54fe785f2df",
      "type": "paragraph"
    },
    {
      "text": "If a selection problem appears in a program for the first time, you probably want to [[DTSTTCPW]] and just use ad-hoc solutions -- an if-statement. But what if you encounter the same issue a second time? Or what if you discover the same choice criteria a second or third time in the program? ",
      "id": "c2085cc89d44ded0",
      "type": "paragraph"
    },
    {
      "text": "When you encounter repeated situations that must decide, based on the same criteria, ad-hoc selection doesn't serve you well in incremental development. The problem is that when changes occur in the code base, you need to find all of the previously built instances of this and update them consistently. But the tools available aren't usually very helpful with this. And if you miss just one, your program is broken. ",
      "id": "340ba4b2887986ba",
      "type": "paragraph"
    },
    {
      "text": "The most common changes, when doing incremental development, with possibly changing requirements, are (a) adding a new option to an existing set of behaviors, and (b) changing a previously defined behavior. Either the criteria for choice changes or the behavior chosen changes. Now search 20,000 lines of code for all of the necessary updates - if and switch statements. ",
      "id": "4e4037ba65350c9d",
      "type": "paragraph"
    },
    {
      "text": "A third possibility is that you are adding something new that requires the same decision structure. Here a new choice will need to be made at a different place in the program, with new behaviors for the various cases. ",
      "id": "499091d2aa36dbb8",
      "type": "paragraph"
    },
    {
      "text": "Of course you want to [[Say It Once]], which isn't hard to do for the behaviors, but is more complex for the choice structure. This is what polymorphic programming is all about. Once you Climb [[Information Hill]] you want to stay at the top, rather than fall down the other side. ",
      "id": "e1cac55e09a57754",
      "type": "paragraph"
    }
  ]
}