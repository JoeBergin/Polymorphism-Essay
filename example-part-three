{
  "title": "Example Part Three",
  "journal": [
    {
      "id": "a3ed65b504492bd7",
      "type": "create",
      "item": {
        "title": "Example Part Three"
      }
    }
  ],
  "story": [
    {
      "text": "So, we have built our Negative and NonNegative classes and are now faced with handling the insert and purchase situations in the program. We will use the max-min-HashMap idea discussed in [[Marshaling the Objects]]",
      "id": "d5afc17b14ccfa40",
      "type": "paragraph"
    },
    {
      "text": "First, we create an pre-load a HashMap in the program at startup. It has two keys, 0 and 1 and the value for 1 is an instance of NonNegative, and for 0 an instance of Negative. ",
      "id": "e4ac2df2c81add1b",
      "type": "paragraph"
    },
    {
      "text": "Next provide a private method named map, that takes an arbitrary int and, using max and min, first compresses the value to either 1 or zero depending on its value, and then accesses the map's value for the result. It returns the associated strategy. ",
      "id": "8e5946ca1e4a0570",
      "type": "paragraph"
    },
    {
      "text": "Then, when the program needs to \"analyze\" an input in an insert operation, it takes the presented value and maps it into a strategy, to which it just sends the insert message. If the object is of class NonNegative, the insert will occur, otherwise error processing. And cyclomatic complexity of the code you write is still 1. ",
      "id": "4813d9d382d94f23",
      "type": "paragraph"
    },
    {
      "text": "You do exactly the same thing in the purchase situation, sending the purchase method to the retrieved object instead.  And what if it later occurs in development that you need a third or fourth situation in which to distinguish negative values? Well, as we discussed in part 2, just add another method to the interface and implement it in the classes and then resolve to an object in the same way. ",
      "id": "c0ad869262b12776",
      "type": "paragraph"
    },
    {
      "text": "There are harder situations, of course. Note that we sort of assumed above that the strategy objects are singletons. If they are not, you can always put factory objects into the HashMap instead of simpler objects. The factory retrieved can then tailor a strategy to the current situation. ",
      "id": "7349d7ebd1100c29",
      "type": "paragraph"
    },
    {
      "text": "<hr/>",
      "id": "a2b1693d0ae4ebbf",
      "type": "paragraph"
    },
    {
      "text": "But there are situations in which nothing seems to work but an if-statement. In such a situation, you might be able to improve your life as a programmer, by centralizing it into a single place and, instead of setting a flag, producing a strategy object that can thereafter be passed to the sites at which it will itself distinguish behaviors. The if statement  produces one kind of object or another, having one behavior or another, just as our HashMap does. ",
      "id": "f66448ad975902ac",
      "type": "paragraph"
    },
    {
      "text": "Then, instead of maintaining a lot of if-statements throughout the program, you have just one for each such \"family\" of decisions. A big improvement in a large program and it helps you [[Say It Once]], even for the structures. ",
      "id": "0b522493ff41afa2",
      "type": "paragraph"
    }
  ]
}